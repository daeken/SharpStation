/* Autogenerated from insts.td. DO NOT EDIT */
// ReSharper disable RedundantUsingDirective
// ReSharper disable SwitchStatementMissingSomeCases
// ReSharper disable SuggestVarOrType_BuiltInTypes
// ReSharper disable ArrangeRedundantParentheses
// ReSharper disable RedundantCast
// ReSharper disable ConditionIsAlwaysTrueOrFalse
// ReSharper disable HeuristicUnreachableCode
// ReSharper disable ConvertIfStatementToConditionalTernaryExpression
#pragma warning disable 162
using System;

namespace SharpStation {
	public partial class Interpreter {
		internal bool Interpret(uint pc, uint inst) {
			unchecked {
				switch((inst) >> ((int) 0x1a)) {
					case 0x0: {
						switch((inst) & (0x3f)) {
							case 0x0: {
								/* SLL */
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								uint shamt = ((inst) >> ((int) 0x6)) & (0x1f);
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								if((rd) != (0x0)) { (ReadAbsorb)[rd] = 0x0; }
								uint temp_1 = (Gpr)[rt];
								DoLds();
								if((rd) != (0x0)) { (Gpr)[rd] = (temp_1) << ((int) shamt); }
								return(true);
								break;
							}
							case 0x2: {
								/* SRL */
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								uint shamt = ((inst) >> ((int) 0x6)) & (0x1f);
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								if((rd) != (0x0)) { (ReadAbsorb)[rd] = 0x0; }
								uint temp_2 = (Gpr)[rt];
								DoLds();
								if((rd) != (0x0)) { (Gpr)[rd] = (temp_2) >> ((int) shamt); }
								return(true);
								break;
							}
							case 0x3: {
								/* SRA */
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								uint shamt = ((inst) >> ((int) 0x6)) & (0x1f);
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								if((rd) != (0x0)) { (ReadAbsorb)[rd] = 0x0; }
								uint temp_3 = (Gpr)[rt];
								DoLds();
								if((rd) != (0x0)) { (Gpr)[rd] = (uint) (((int) (temp_3)) >> ((int) (int) (shamt))); }
								return(true);
								break;
							}
							case 0x4: {
								/* SLLV */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								if((rd) != (0x0)) { (ReadAbsorb)[rd] = 0x0; }
								uint temp_4 = (Gpr)[rs];
								uint temp_5 = (Gpr)[rt];
								DoLds();
								if((rd) != (0x0)) { (Gpr)[rd] = (temp_5) << ((int) temp_4); }
								return(true);
								break;
							}
							case 0x6: {
								/* SRLV */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								if((rd) != (0x0)) { (ReadAbsorb)[rd] = 0x0; }
								uint temp_6 = (Gpr)[rs];
								uint temp_7 = (Gpr)[rt];
								DoLds();
								if((rd) != (0x0)) { (Gpr)[rd] = (temp_7) >> ((int) temp_6); }
								return(true);
								break;
							}
							case 0x7: {
								/* SRAV */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								if((rd) != (0x0)) { (ReadAbsorb)[rd] = 0x0; }
								uint temp_8 = (Gpr)[rs];
								uint temp_9 = (Gpr)[rt];
								DoLds();
								if((rd) != (0x0)) { (Gpr)[rd] = (uint) (((int) (temp_9)) >> ((int) (int) (temp_8))); }
								return(true);
								break;
							}
							case 0x8: {
								/* JR */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								uint temp_10 = (Gpr)[rs];
								DoLds();
								Alignment(temp_10, 0x20, false, pc);
								BranchTo = temp_10;
								return(true);
								break;
							}
							case 0x9: {
								/* JALR */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((rd) != (0x0)) { (ReadAbsorb)[rd] = 0x0; }
								uint temp_11 = (Gpr)[rs];
								DoLds();
								if((rd) != (0x0)) { (Gpr)[rd] = ((pc) + (0x4)) + (0x4); }
								Alignment(temp_11, 0x20, false, pc);
								BranchTo = temp_11;
								return(true);
								break;
							}
							case 0xc: {
								/* SYSCALL */
								uint code = ((inst) >> ((int) 0x6)) & (0xfffff);
								DoLds();
								Syscall((int) (code), pc, inst);
								return(true);
								break;
							}
							case 0xd: {
								/* BREAK */
								uint code = ((inst) >> ((int) 0x6)) & (0xfffff);
								DoLds();
								Break((int) (code), pc, inst);
								return(true);
								break;
							}
							case 0x10: {
								/* MFHI */
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rd) != (0x0)) { (ReadAbsorb)[rd] = 0x0; }
								DoLds();
								if((rd) != (0x0)) { (Gpr)[rd] = Hi; }
								AbsorbMuldivDelay();
								return(true);
								break;
							}
							case 0x11: {
								/* MTHI */
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rd) != (0x0)) { (ReadAbsorb)[rd] = 0x0; }
								uint temp_12 = (Gpr)[rd];
								DoLds();
								Hi = temp_12;
								return(true);
								break;
							}
							case 0x12: {
								/* MFLO */
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rd) != (0x0)) { (ReadAbsorb)[rd] = 0x0; }
								DoLds();
								if((rd) != (0x0)) { (Gpr)[rd] = Lo; }
								AbsorbMuldivDelay();
								return(true);
								break;
							}
							case 0x13: {
								/* MTLO */
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rd) != (0x0)) { (ReadAbsorb)[rd] = 0x0; }
								uint temp_13 = (Gpr)[rd];
								DoLds();
								Lo = temp_13;
								return(true);
								break;
							}
							case 0x18: {
								/* MULT */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								uint temp_14 = (Gpr)[rs];
								uint temp_15 = (Gpr)[rt];
								DoLds();
								ulong _t = (ulong) (((long) ((int) (temp_14))) * ((long) ((int) (temp_15))));
								Lo = (uint) (_t);
								Hi = (uint) ((_t) >> ((int) 0x20));
								MulDelay(temp_14, temp_15, true);
								return(true);
								break;
							}
							case 0x19: {
								/* MULTU */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								uint temp_16 = (Gpr)[rs];
								uint temp_17 = (Gpr)[rt];
								DoLds();
								ulong _t = ((ulong) (temp_16)) * ((ulong) (temp_17));
								Lo = (uint) (_t);
								Hi = (uint) ((_t) >> ((int) 0x20));
								MulDelay(temp_16, temp_17, false);
								return(true);
								break;
							}
							case 0x1a: {
								/* DIV */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								uint temp_18 = (Gpr)[rs];
								uint temp_19 = (Gpr)[rt];
								DoLds();
								if((temp_19) == (0x0)) {
									if(((temp_18) & (0x80000000)) != (0x0)) {
										Lo = 0x1;
									} else {
										Lo = 0xffffffff;
									}
									Hi = temp_18;
								} else {
									if(((temp_18) == (0x80000000)) & ((temp_19) == (0xffffffff))) {
										Lo = 0x80000000;
										Hi = 0x0;
									} else {
										Lo = (uint) (((int) (temp_18)) / ((int) (temp_19)));
										Hi = (uint) (((int) (temp_18)) % ((int) (temp_19)));
										DivDelay();
									}
								}
								return(true);
								break;
							}
							case 0x1b: {
								/* DIVU */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								uint temp_20 = (Gpr)[rs];
								uint temp_21 = (Gpr)[rt];
								DoLds();
								if((temp_21) == (0x0)) {
									Lo = 0xffffffff;
									Hi = temp_20;
								} else {
									Lo = (temp_20) / (temp_21);
									Hi = (temp_20) % (temp_21);
									DivDelay();
								}
								return(true);
								break;
							}
							case 0x20: {
								/* ADD */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								if((rd) != (0x0)) { (ReadAbsorb)[rd] = 0x0; }
								uint temp_22 = (Gpr)[rs];
								uint temp_23 = (Gpr)[rt];
								DoLds();
								Overflow(temp_22, temp_23, 0x1, pc, inst);
								if((rd) != (0x0)) { (Gpr)[rd] = (temp_22) + (temp_23); }
								return(true);
								break;
							}
							case 0x21: {
								/* ADDU */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								if((rd) != (0x0)) { (ReadAbsorb)[rd] = 0x0; }
								uint temp_24 = (Gpr)[rs];
								uint temp_25 = (Gpr)[rt];
								DoLds();
								if((rd) != (0x0)) { (Gpr)[rd] = (temp_24) + (temp_25); }
								return(true);
								break;
							}
							case 0x22: {
								/* SUB */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								if((rd) != (0x0)) { (ReadAbsorb)[rd] = 0x0; }
								uint temp_26 = (Gpr)[rs];
								uint temp_27 = (Gpr)[rt];
								DoLds();
								Overflow(temp_26, temp_27, -0x1, pc, inst);
								if((rd) != (0x0)) { (Gpr)[rd] = (temp_26) - (temp_27); }
								return(true);
								break;
							}
							case 0x23: {
								/* SUBU */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								if((rd) != (0x0)) { (ReadAbsorb)[rd] = 0x0; }
								uint temp_28 = (Gpr)[rs];
								uint temp_29 = (Gpr)[rt];
								DoLds();
								if((rd) != (0x0)) { (Gpr)[rd] = (temp_28) - (temp_29); }
								return(true);
								break;
							}
							case 0x24: {
								/* AND */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								if((rd) != (0x0)) { (ReadAbsorb)[rd] = 0x0; }
								uint temp_30 = (Gpr)[rs];
								uint temp_31 = (Gpr)[rt];
								DoLds();
								if((rd) != (0x0)) { (Gpr)[rd] = (temp_30) & (temp_31); }
								return(true);
								break;
							}
							case 0x25: {
								/* OR */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								if((rd) != (0x0)) { (ReadAbsorb)[rd] = 0x0; }
								uint temp_32 = (Gpr)[rs];
								uint temp_33 = (Gpr)[rt];
								DoLds();
								if((rd) != (0x0)) { (Gpr)[rd] = (temp_32) | (temp_33); }
								return(true);
								break;
							}
							case 0x26: {
								/* XOR */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								if((rd) != (0x0)) { (ReadAbsorb)[rd] = 0x0; }
								uint temp_34 = (Gpr)[rs];
								uint temp_35 = (Gpr)[rt];
								DoLds();
								if((rd) != (0x0)) { (Gpr)[rd] = (temp_34) ^ (temp_35); }
								return(true);
								break;
							}
							case 0x27: {
								/* NOR */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								if((rd) != (0x0)) { (ReadAbsorb)[rd] = 0x0; }
								uint temp_36 = (Gpr)[rs];
								uint temp_37 = (Gpr)[rt];
								DoLds();
								if((rd) != (0x0)) { (Gpr)[rd] = ~((temp_36) | (temp_37)); }
								return(true);
								break;
							}
							case 0x2a: {
								/* SLT */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								if((rd) != (0x0)) { (ReadAbsorb)[rd] = 0x0; }
								uint temp_38 = (Gpr)[rs];
								uint temp_39 = (Gpr)[rt];
								DoLds();
								if((rd) != (0x0)) { (Gpr)[rd] = (((int) (temp_38)) < ((int) (temp_39))) ? (1U) : (0U); }
								return(true);
								break;
							}
							case 0x2b: {
								/* SLTU */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								if((rd) != (0x0)) { (ReadAbsorb)[rd] = 0x0; }
								uint temp_40 = (Gpr)[rs];
								uint temp_41 = (Gpr)[rt];
								DoLds();
								if((rd) != (0x0)) { (Gpr)[rd] = ((temp_40) < (temp_41)) ? (1U) : (0U); }
								return(true);
								break;
							}
						}
						break;
					}
					case 0x1: {
						switch(((inst) >> ((int) 0x10)) & (0x1f)) {
							case 0x0: {
								/* BLTZanonymous_0 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								uint temp_42 = (Gpr)[rs];
								DoLds();
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_42)) < (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0x1: {
								/* BGEZanonymous_0 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								uint temp_43 = (Gpr)[rs];
								DoLds();
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_43)) >= (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0x2: {
								/* BLTZanonymous_1 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								uint temp_44 = (Gpr)[rs];
								DoLds();
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_44)) < (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0x3: {
								/* BGEZanonymous_1 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								uint temp_45 = (Gpr)[rs];
								DoLds();
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_45)) >= (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0x4: {
								/* BLTZanonymous_2 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								uint temp_46 = (Gpr)[rs];
								DoLds();
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_46)) < (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0x5: {
								/* BGEZanonymous_2 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								uint temp_47 = (Gpr)[rs];
								DoLds();
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_47)) >= (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0x6: {
								/* BLTZanonymous_3 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								uint temp_48 = (Gpr)[rs];
								DoLds();
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_48)) < (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0x7: {
								/* BGEZanonymous_3 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								uint temp_49 = (Gpr)[rs];
								DoLds();
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_49)) >= (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0x8: {
								/* BLTZanonymous_4 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								uint temp_50 = (Gpr)[rs];
								DoLds();
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_50)) < (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0x9: {
								/* BGEZanonymous_4 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								uint temp_51 = (Gpr)[rs];
								DoLds();
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_51)) >= (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0xa: {
								/* BLTZanonymous_5 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								uint temp_52 = (Gpr)[rs];
								DoLds();
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_52)) < (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0xb: {
								/* BGEZanonymous_5 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								uint temp_53 = (Gpr)[rs];
								DoLds();
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_53)) >= (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0xc: {
								/* BLTZanonymous_6 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								uint temp_54 = (Gpr)[rs];
								DoLds();
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_54)) < (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0xd: {
								/* BGEZanonymous_6 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								uint temp_55 = (Gpr)[rs];
								DoLds();
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_55)) >= (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0xe: {
								/* BLTZanonymous_7 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								uint temp_56 = (Gpr)[rs];
								DoLds();
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_56)) < (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0xf: {
								/* BGEZanonymous_7 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								uint temp_57 = (Gpr)[rs];
								DoLds();
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_57)) >= (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0x10: {
								/* BLTZALanonymous_0 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((0x1f) != (0x0)) { (ReadAbsorb)[0x1f] = 0x0; }
								uint temp_58 = (Gpr)[rs];
								DoLds();
								if((0x1f) != (0x0)) { (Gpr)[0x1f] = ((pc) + (0x4)) + (0x4); }
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_58)) < (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0x11: {
								/* BGEZALanonymous_0 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((0x1f) != (0x0)) { (ReadAbsorb)[0x1f] = 0x0; }
								uint temp_59 = (Gpr)[rs];
								DoLds();
								if((0x1f) != (0x0)) { (Gpr)[0x1f] = ((pc) + (0x4)) + (0x4); }
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_59)) >= (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0x12: {
								/* BLTZALanonymous_1 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((0x1f) != (0x0)) { (ReadAbsorb)[0x1f] = 0x0; }
								uint temp_60 = (Gpr)[rs];
								DoLds();
								if((0x1f) != (0x0)) { (Gpr)[0x1f] = ((pc) + (0x4)) + (0x4); }
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_60)) < (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0x13: {
								/* BGEZALanonymous_1 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((0x1f) != (0x0)) { (ReadAbsorb)[0x1f] = 0x0; }
								uint temp_61 = (Gpr)[rs];
								DoLds();
								if((0x1f) != (0x0)) { (Gpr)[0x1f] = ((pc) + (0x4)) + (0x4); }
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_61)) >= (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0x14: {
								/* BLTZALanonymous_2 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((0x1f) != (0x0)) { (ReadAbsorb)[0x1f] = 0x0; }
								uint temp_62 = (Gpr)[rs];
								DoLds();
								if((0x1f) != (0x0)) { (Gpr)[0x1f] = ((pc) + (0x4)) + (0x4); }
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_62)) < (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0x15: {
								/* BGEZALanonymous_2 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((0x1f) != (0x0)) { (ReadAbsorb)[0x1f] = 0x0; }
								uint temp_63 = (Gpr)[rs];
								DoLds();
								if((0x1f) != (0x0)) { (Gpr)[0x1f] = ((pc) + (0x4)) + (0x4); }
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_63)) >= (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0x16: {
								/* BLTZALanonymous_3 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((0x1f) != (0x0)) { (ReadAbsorb)[0x1f] = 0x0; }
								uint temp_64 = (Gpr)[rs];
								DoLds();
								if((0x1f) != (0x0)) { (Gpr)[0x1f] = ((pc) + (0x4)) + (0x4); }
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_64)) < (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0x17: {
								/* BGEZALanonymous_3 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((0x1f) != (0x0)) { (ReadAbsorb)[0x1f] = 0x0; }
								uint temp_65 = (Gpr)[rs];
								DoLds();
								if((0x1f) != (0x0)) { (Gpr)[0x1f] = ((pc) + (0x4)) + (0x4); }
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_65)) >= (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0x18: {
								/* BLTZALanonymous_4 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((0x1f) != (0x0)) { (ReadAbsorb)[0x1f] = 0x0; }
								uint temp_66 = (Gpr)[rs];
								DoLds();
								if((0x1f) != (0x0)) { (Gpr)[0x1f] = ((pc) + (0x4)) + (0x4); }
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_66)) < (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0x19: {
								/* BGEZALanonymous_4 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((0x1f) != (0x0)) { (ReadAbsorb)[0x1f] = 0x0; }
								uint temp_67 = (Gpr)[rs];
								DoLds();
								if((0x1f) != (0x0)) { (Gpr)[0x1f] = ((pc) + (0x4)) + (0x4); }
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_67)) >= (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0x1a: {
								/* BLTZALanonymous_5 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((0x1f) != (0x0)) { (ReadAbsorb)[0x1f] = 0x0; }
								uint temp_68 = (Gpr)[rs];
								DoLds();
								if((0x1f) != (0x0)) { (Gpr)[0x1f] = ((pc) + (0x4)) + (0x4); }
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_68)) < (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0x1b: {
								/* BGEZALanonymous_5 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((0x1f) != (0x0)) { (ReadAbsorb)[0x1f] = 0x0; }
								uint temp_69 = (Gpr)[rs];
								DoLds();
								if((0x1f) != (0x0)) { (Gpr)[0x1f] = ((pc) + (0x4)) + (0x4); }
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_69)) >= (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0x1c: {
								/* BLTZALanonymous_6 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((0x1f) != (0x0)) { (ReadAbsorb)[0x1f] = 0x0; }
								uint temp_70 = (Gpr)[rs];
								DoLds();
								if((0x1f) != (0x0)) { (Gpr)[0x1f] = ((pc) + (0x4)) + (0x4); }
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_70)) < (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0x1d: {
								/* BGEZALanonymous_6 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((0x1f) != (0x0)) { (ReadAbsorb)[0x1f] = 0x0; }
								uint temp_71 = (Gpr)[rs];
								DoLds();
								if((0x1f) != (0x0)) { (Gpr)[0x1f] = ((pc) + (0x4)) + (0x4); }
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_71)) >= (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0x1e: {
								/* BLTZALanonymous_7 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((0x1f) != (0x0)) { (ReadAbsorb)[0x1f] = 0x0; }
								uint temp_72 = (Gpr)[rs];
								DoLds();
								if((0x1f) != (0x0)) { (Gpr)[0x1f] = ((pc) + (0x4)) + (0x4); }
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_72)) < (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
							case 0x1f: {
								/* BGEZALanonymous_7 */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								if((0x1f) != (0x0)) { (ReadAbsorb)[0x1f] = 0x0; }
								uint temp_73 = (Gpr)[rs];
								DoLds();
								if((0x1f) != (0x0)) { (Gpr)[0x1f] = ((pc) + (0x4)) + (0x4); }
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_73)) >= (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
						}
						break;
					}
					case 0x2: {
						/* J */
						uint imm = (inst) & (0x3ffffff);
						DoLds();
						uint target = (((pc) + (0x4)) & (0xf0000000)) + ((imm) << ((int) 0x2));
						BranchTo = target;
						return(true);
						break;
					}
					case 0x3: {
						/* JAL */
						uint imm = (inst) & (0x3ffffff);
						if((0x1f) != (0x0)) { (ReadAbsorb)[0x1f] = 0x0; }
						DoLds();
						if((0x1f) != (0x0)) { (Gpr)[0x1f] = ((pc) + (0x4)) + (0x4); }
						uint target = (((pc) + (0x4)) & (0xf0000000)) + ((imm) << ((int) 0x2));
						BranchTo = target;
						return(true);
						break;
					}
					case 0x4: {
						/* BEQ */
						uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
						uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
						uint imm = (inst) & (0xffff);
						if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
						if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
						uint temp_74 = (Gpr)[rs];
						uint temp_75 = (Gpr)[rt];
						DoLds();
						uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
						if((temp_74) == (temp_75)) {
							BranchTo = target;
						} else {
							BranchTo = (uint) ((pc) + (0x8));
						}
						return(true);
						break;
					}
					case 0x5: {
						/* BNE */
						uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
						uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
						uint imm = (inst) & (0xffff);
						if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
						if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
						uint temp_76 = (Gpr)[rs];
						uint temp_77 = (Gpr)[rt];
						DoLds();
						uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
						if((temp_76) != (temp_77)) {
							BranchTo = target;
						} else {
							BranchTo = (uint) ((pc) + (0x8));
						}
						return(true);
						break;
					}
					case 0x6: {
						switch(((inst) >> ((int) 0x10)) & (0x1f)) {
							case 0x0: {
								/* BLEZ */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								uint temp_78 = (Gpr)[rs];
								DoLds();
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_78)) <= (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
						}
						break;
					}
					case 0x7: {
						switch(((inst) >> ((int) 0x10)) & (0x1f)) {
							case 0x0: {
								/* BGTZ */
								uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
								uint imm = (inst) & (0xffff);
								if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
								uint temp_79 = (Gpr)[rs];
								DoLds();
								uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
								if(((int) (temp_79)) > (0x0)) {
									BranchTo = target;
								} else {
									BranchTo = (uint) ((pc) + (0x8));
								}
								return(true);
								break;
							}
						}
						break;
					}
					case 0x8: {
						/* ADDI */
						uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
						uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
						uint imm = (inst) & (0xffff);
						if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
						if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
						uint temp_80 = (Gpr)[rs];
						DoLds();
						uint eimm = (uint) (SignExt(0x10, imm));
						Overflow(temp_80, eimm, 0x1, pc, inst);
						if((rt) != (0x0)) { (Gpr)[rt] = (temp_80) + (eimm); }
						return(true);
						break;
					}
					case 0x9: {
						/* ADDIU */
						uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
						uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
						uint imm = (inst) & (0xffff);
						if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
						if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
						uint temp_81 = (Gpr)[rs];
						DoLds();
						uint eimm = (uint) (SignExt(0x10, imm));
						if((rt) != (0x0)) { (Gpr)[rt] = (temp_81) + (eimm); }
						return(true);
						break;
					}
					case 0xa: {
						/* SLTI */
						uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
						uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
						uint imm = (inst) & (0xffff);
						if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
						if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
						uint temp_82 = (Gpr)[rs];
						DoLds();
						uint eimm = (uint) (SignExt(0x10, imm));
						if((rt) != (0x0)) { (Gpr)[rt] = (((int) (temp_82)) < ((int) (eimm))) ? (1U) : (0U); }
						return(true);
						break;
					}
					case 0xb: {
						/* SLTIU */
						uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
						uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
						uint imm = (inst) & (0xffff);
						if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
						if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
						uint temp_83 = (Gpr)[rs];
						DoLds();
						uint eimm = (uint) (SignExt(0x10, imm));
						if((rt) != (0x0)) { (Gpr)[rt] = ((temp_83) < (eimm)) ? (1U) : (0U); }
						return(true);
						break;
					}
					case 0xc: {
						/* ANDI */
						uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
						uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
						uint imm = (inst) & (0xffff);
						if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
						if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
						uint temp_84 = (Gpr)[rs];
						DoLds();
						uint eimm = imm;
						if((rt) != (0x0)) { (Gpr)[rt] = (temp_84) & (eimm); }
						return(true);
						break;
					}
					case 0xd: {
						/* ORI */
						uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
						uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
						uint imm = (inst) & (0xffff);
						if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
						if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
						uint temp_85 = (Gpr)[rs];
						DoLds();
						uint eimm = imm;
						if((rt) != (0x0)) { (Gpr)[rt] = (temp_85) | (eimm); }
						return(true);
						break;
					}
					case 0xe: {
						/* XORI */
						uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
						uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
						uint imm = (inst) & (0xffff);
						if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
						if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
						uint temp_86 = (Gpr)[rs];
						DoLds();
						uint eimm = imm;
						if((rt) != (0x0)) { (Gpr)[rt] = (temp_86) ^ (eimm); }
						return(true);
						break;
					}
					case 0xf: {
						/* LUI */
						uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
						uint imm = (inst) & (0xffff);
						if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
						DoLds();
						if((rt) != (0x0)) { (Gpr)[rt] = (imm) << ((int) 0x10); }
						return(true);
						break;
					}
					case 0x10: {
						switch(((inst) >> ((int) 0x15)) & (0x1f)) {
							case 0x0: {
								/* MFCzanonymous_8 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								DoLds();
								DeferSet(rt, ReadCopreg(cop, rd));
								return(true);
								break;
							}
							case 0x2: {
								/* CFCzanonymous_8 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								DoLds();
								if((rt) != (0x0)) { (Gpr)[rt] = ReadCopcreg(cop, rd); }
								return(true);
								break;
							}
							case 0x4: {
								/* MTCzanonymous_8 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								uint temp_87 = (Gpr)[rt];
								DoLds();
								WriteCopreg(cop, rd, temp_87);
								return(true);
								break;
							}
							case 0x6: {
								/* CTCzanonymous_8 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								uint temp_88 = (Gpr)[rt];
								DoLds();
								WriteCopcreg(cop, rd, temp_88);
								return(true);
								break;
							}
							case 0x10: {
								/* COPzanonymous_12anonymous_8 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x11: {
								/* COPzanonymous_13anonymous_8 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x12: {
								/* COPzanonymous_14anonymous_8 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x13: {
								/* COPzanonymous_15anonymous_8 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x14: {
								/* COPzanonymous_16anonymous_8 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x15: {
								/* COPzanonymous_17anonymous_8 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x16: {
								/* COPzanonymous_18anonymous_8 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x17: {
								/* COPzanonymous_19anonymous_8 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x18: {
								/* COPzanonymous_20anonymous_8 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x19: {
								/* COPzanonymous_21anonymous_8 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x1a: {
								/* COPzanonymous_22anonymous_8 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x1b: {
								/* COPzanonymous_23anonymous_8 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x1c: {
								/* COPzanonymous_24anonymous_8 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x1d: {
								/* COPzanonymous_25anonymous_8 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x1e: {
								/* COPzanonymous_26anonymous_8 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x1f: {
								/* COPzanonymous_27anonymous_8 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
						}
						break;
					}
					case 0x11: {
						switch(((inst) >> ((int) 0x15)) & (0x1f)) {
							case 0x0: {
								/* MFCzanonymous_9 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								DoLds();
								DeferSet(rt, ReadCopreg(cop, rd));
								return(true);
								break;
							}
							case 0x2: {
								/* CFCzanonymous_9 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								DoLds();
								if((rt) != (0x0)) { (Gpr)[rt] = ReadCopcreg(cop, rd); }
								return(true);
								break;
							}
							case 0x4: {
								/* MTCzanonymous_9 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								uint temp_89 = (Gpr)[rt];
								DoLds();
								WriteCopreg(cop, rd, temp_89);
								return(true);
								break;
							}
							case 0x6: {
								/* CTCzanonymous_9 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								uint temp_90 = (Gpr)[rt];
								DoLds();
								WriteCopcreg(cop, rd, temp_90);
								return(true);
								break;
							}
							case 0x10: {
								/* COPzanonymous_12anonymous_9 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x11: {
								/* COPzanonymous_13anonymous_9 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x12: {
								/* COPzanonymous_14anonymous_9 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x13: {
								/* COPzanonymous_15anonymous_9 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x14: {
								/* COPzanonymous_16anonymous_9 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x15: {
								/* COPzanonymous_17anonymous_9 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x16: {
								/* COPzanonymous_18anonymous_9 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x17: {
								/* COPzanonymous_19anonymous_9 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x18: {
								/* COPzanonymous_20anonymous_9 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x19: {
								/* COPzanonymous_21anonymous_9 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x1a: {
								/* COPzanonymous_22anonymous_9 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x1b: {
								/* COPzanonymous_23anonymous_9 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x1c: {
								/* COPzanonymous_24anonymous_9 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x1d: {
								/* COPzanonymous_25anonymous_9 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x1e: {
								/* COPzanonymous_26anonymous_9 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x1f: {
								/* COPzanonymous_27anonymous_9 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
						}
						break;
					}
					case 0x12: {
						switch(((inst) >> ((int) 0x15)) & (0x1f)) {
							case 0x0: {
								/* MFCzanonymous_10 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								DoLds();
								DeferSet(rt, ReadCopreg(cop, rd));
								return(true);
								break;
							}
							case 0x2: {
								/* CFCzanonymous_10 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								DoLds();
								if((rt) != (0x0)) { (Gpr)[rt] = ReadCopcreg(cop, rd); }
								return(true);
								break;
							}
							case 0x4: {
								/* MTCzanonymous_10 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								uint temp_91 = (Gpr)[rt];
								DoLds();
								WriteCopreg(cop, rd, temp_91);
								return(true);
								break;
							}
							case 0x6: {
								/* CTCzanonymous_10 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								uint temp_92 = (Gpr)[rt];
								DoLds();
								WriteCopcreg(cop, rd, temp_92);
								return(true);
								break;
							}
							case 0x10: {
								/* COPzanonymous_12anonymous_10 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x11: {
								/* COPzanonymous_13anonymous_10 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x12: {
								/* COPzanonymous_14anonymous_10 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x13: {
								/* COPzanonymous_15anonymous_10 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x14: {
								/* COPzanonymous_16anonymous_10 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x15: {
								/* COPzanonymous_17anonymous_10 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x16: {
								/* COPzanonymous_18anonymous_10 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x17: {
								/* COPzanonymous_19anonymous_10 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x18: {
								/* COPzanonymous_20anonymous_10 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x19: {
								/* COPzanonymous_21anonymous_10 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x1a: {
								/* COPzanonymous_22anonymous_10 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x1b: {
								/* COPzanonymous_23anonymous_10 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x1c: {
								/* COPzanonymous_24anonymous_10 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x1d: {
								/* COPzanonymous_25anonymous_10 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x1e: {
								/* COPzanonymous_26anonymous_10 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x1f: {
								/* COPzanonymous_27anonymous_10 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
						}
						break;
					}
					case 0x13: {
						switch(((inst) >> ((int) 0x15)) & (0x1f)) {
							case 0x0: {
								/* MFCzanonymous_11 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								DoLds();
								DeferSet(rt, ReadCopreg(cop, rd));
								return(true);
								break;
							}
							case 0x2: {
								/* CFCzanonymous_11 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								DoLds();
								if((rt) != (0x0)) { (Gpr)[rt] = ReadCopcreg(cop, rd); }
								return(true);
								break;
							}
							case 0x4: {
								/* MTCzanonymous_11 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								uint temp_93 = (Gpr)[rt];
								DoLds();
								WriteCopreg(cop, rd, temp_93);
								return(true);
								break;
							}
							case 0x6: {
								/* CTCzanonymous_11 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
								uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
								if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
								uint temp_94 = (Gpr)[rt];
								DoLds();
								WriteCopcreg(cop, rd, temp_94);
								return(true);
								break;
							}
							case 0x10: {
								/* COPzanonymous_12anonymous_11 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x11: {
								/* COPzanonymous_13anonymous_11 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x12: {
								/* COPzanonymous_14anonymous_11 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x13: {
								/* COPzanonymous_15anonymous_11 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x14: {
								/* COPzanonymous_16anonymous_11 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x15: {
								/* COPzanonymous_17anonymous_11 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x16: {
								/* COPzanonymous_18anonymous_11 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x17: {
								/* COPzanonymous_19anonymous_11 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x18: {
								/* COPzanonymous_20anonymous_11 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x19: {
								/* COPzanonymous_21anonymous_11 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x1a: {
								/* COPzanonymous_22anonymous_11 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x1b: {
								/* COPzanonymous_23anonymous_11 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x1c: {
								/* COPzanonymous_24anonymous_11 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x1d: {
								/* COPzanonymous_25anonymous_11 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x1e: {
								/* COPzanonymous_26anonymous_11 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
							case 0x1f: {
								/* COPzanonymous_27anonymous_11 */
								uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
								uint cofun = (inst) & (0x1ffffff);
								DoLds();
								Copfun(cop, cofun, inst);
								return(true);
								break;
							}
						}
						break;
					}
					case 0x20: {
						/* LB */
						uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
						uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
						uint imm = (inst) & (0xffff);
						if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
						if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
						uint temp_95 = (Gpr)[rs];
						DoLds();
						uint offset = (uint) (SignExt(0x10, imm));
						DeferSet(rt, (uint) (SignExt(0x8, LoadMemory(0x8, (temp_95) + (offset), pc))));
						return(true);
						break;
					}
					case 0x21: {
						/* LH */
						uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
						uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
						uint imm = (inst) & (0xffff);
						if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
						if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
						uint temp_96 = (Gpr)[rs];
						DoLds();
						uint offset = (uint) (SignExt(0x10, imm));
						uint addr = (temp_96) + (offset);
						Alignment(addr, 0x10, false, pc);
						DeferSet(rt, (uint) (SignExt(0x10, LoadMemory(0x10, addr, pc))));
						return(true);
						break;
					}
					case 0x22: {
						/* LWL */
						uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
						uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
						uint imm = (inst) & (0xffff);
						if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
						if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
						uint temp_97 = (Gpr)[rs];
						uint temp_98 = (Gpr)[rt];
						DoLoad(rt, ref(temp_98));
						uint simm = (uint) (SignExt(0x10, imm));
						uint offset = (temp_97) + (simm);
						uint bottom = (offset) & (0x3);
						uint moffset = (offset) & (0xfffffffc);
						if((bottom) == (0x0)) {
							DeferSet(rt, ((temp_98) & (0xffffff)) | ((LoadMemory(0x8, moffset, pc)) << ((int) 0x18)));
						} else {
							if((bottom) == (0x1)) {
								DeferSet(rt, ((temp_98) & (0xffff)) | ((LoadMemory(0x10, moffset, pc)) << ((int) 0x10)));
							} else {
								if((bottom) == (0x2)) {
									DeferSet(rt, ((temp_98) & (0xff)) | ((LoadMemory(0x18, moffset, pc)) << ((int) 0x8)));
								} else {
									DeferSet(rt, LoadMemory(0x20, moffset, pc));
								}
							}
						}
						return(true);
						break;
					}
					case 0x23: {
						/* LW */
						uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
						uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
						uint imm = (inst) & (0xffff);
						if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
						if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
						uint temp_99 = (Gpr)[rs];
						DoLds();
						uint offset = (uint) (SignExt(0x10, imm));
						uint addr = (temp_99) + (offset);
						Alignment(addr, 0x20, false, pc);
						DeferSet(rt, LoadMemory(0x20, addr, pc));
						return(true);
						break;
					}
					case 0x24: {
						/* LBU */
						uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
						uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
						uint imm = (inst) & (0xffff);
						if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
						if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
						uint temp_100 = (Gpr)[rs];
						DoLds();
						uint offset = (uint) (SignExt(0x10, imm));
						DeferSet(rt, LoadMemory(0x8, (temp_100) + (offset), pc));
						return(true);
						break;
					}
					case 0x25: {
						/* LHU */
						uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
						uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
						uint imm = (inst) & (0xffff);
						if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
						if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
						uint temp_101 = (Gpr)[rs];
						DoLds();
						uint offset = (uint) (SignExt(0x10, imm));
						uint addr = (temp_101) + (offset);
						Alignment(addr, 0x10, false, pc);
						DeferSet(rt, LoadMemory(0x10, addr, pc));
						return(true);
						break;
					}
					case 0x26: {
						/* LWR */
						uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
						uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
						uint imm = (inst) & (0xffff);
						if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
						if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
						uint temp_102 = (Gpr)[rs];
						uint temp_103 = (Gpr)[rt];
						DoLoad(rt, ref(temp_103));
						uint simm = (uint) (SignExt(0x10, imm));
						uint offset = (temp_102) + (simm);
						uint bottom = (offset) & (0x3);
						if((bottom) == (0x0)) {
							DeferSet(rt, LoadMemory(0x20, offset, pc));
						} else {
							if((bottom) == (0x1)) {
								DeferSet(rt, ((temp_103) & (0xff000000)) | (LoadMemory(0x18, offset, pc)));
							} else {
								if((bottom) == (0x2)) {
									DeferSet(rt, ((temp_103) & (0xffff0000)) | (LoadMemory(0x10, offset, pc)));
								} else {
									DeferSet(rt, ((temp_103) & (0xffffff00)) | (LoadMemory(0x8, offset, pc)));
								}
							}
						}
						return(true);
						break;
					}
					case 0x28: {
						/* SB */
						uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
						uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
						uint imm = (inst) & (0xffff);
						if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
						if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
						uint temp_104 = (Gpr)[rs];
						uint temp_105 = (Gpr)[rt];
						DoLds();
						uint offset = (uint) (SignExt(0x10, imm));
						StoreMemory(0x8, (temp_104) + (offset), temp_105, pc);
						return(true);
						break;
					}
					case 0x29: {
						/* SH */
						uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
						uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
						uint imm = (inst) & (0xffff);
						if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
						if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
						uint temp_106 = (Gpr)[rs];
						uint temp_107 = (Gpr)[rt];
						DoLds();
						uint offset = (uint) (SignExt(0x10, imm));
						uint addr = (temp_106) + (offset);
						Alignment(addr, 0x10, true, pc);
						StoreMemory(0x10, addr, temp_107, pc);
						return(true);
						break;
					}
					case 0x2a: {
						/* SWL */
						uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
						uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
						uint imm = (inst) & (0xffff);
						if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
						if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
						uint temp_108 = (Gpr)[rs];
						uint temp_109 = (Gpr)[rt];
						DoLds();
						uint simm = (uint) (SignExt(0x10, imm));
						uint offset = (temp_108) + (simm);
						uint bottom = (offset) & (0x3);
						uint moffset = (offset) & (0xfffffffc);
						if((bottom) == (0x0)) {
							StoreMemory(0x8, moffset, (temp_109) >> ((int) 0x18), pc);
						} else {
							if((bottom) == (0x1)) {
								StoreMemory(0x10, moffset, (temp_109) >> ((int) 0x10), pc);
							} else {
								if((bottom) == (0x2)) {
									StoreMemory(0x18, moffset, (temp_109) >> ((int) 0x8), pc);
								} else {
									StoreMemory(0x20, moffset, temp_109, pc);
								}
							}
						}
						return(true);
						break;
					}
					case 0x2b: {
						/* SW */
						uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
						uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
						uint imm = (inst) & (0xffff);
						if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
						if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
						uint temp_110 = (Gpr)[rs];
						uint temp_111 = (Gpr)[rt];
						DoLds();
						uint offset = (uint) (SignExt(0x10, imm));
						uint addr = (temp_110) + (offset);
						Alignment(addr, 0x20, true, pc);
						StoreMemory(0x20, addr, temp_111, pc);
						return(true);
						break;
					}
					case 0x2e: {
						/* SWR */
						uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
						uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
						uint imm = (inst) & (0xffff);
						if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
						if((rt) != (0x0)) { (ReadAbsorb)[rt] = 0x0; }
						uint temp_112 = (Gpr)[rs];
						uint temp_113 = (Gpr)[rt];
						DoLds();
						uint simm = (uint) (SignExt(0x10, imm));
						uint offset = (temp_112) + (simm);
						uint bottom = (offset) & (0x3);
						if((bottom) == (0x0)) {
							StoreMemory(0x20, offset, temp_113, pc);
						} else {
							if((bottom) == (0x1)) {
								StoreMemory(0x18, offset, temp_113, pc);
							} else {
								if((bottom) == (0x2)) {
									StoreMemory(0x10, offset, temp_113, pc);
								} else {
									StoreMemory(0x8, offset, temp_113, pc);
								}
							}
						}
						return(true);
						break;
					}
					case 0x32: {
						/* LWC2 */
						uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
						uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
						uint imm = (inst) & (0xffff);
						if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
						uint temp_114 = (Gpr)[rs];
						DoLds();
						uint offset = (uint) (SignExt(0x10, imm));
						uint addr = (temp_114) + (offset);
						Alignment(addr, 0x20, false, pc);
						WriteCopreg(0x2, rt, LoadMemory(0x20, (temp_114) + (offset), pc));
						return(true);
						break;
					}
					case 0x3a: {
						/* SWC2 */
						uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
						uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
						uint imm = (inst) & (0xffff);
						if((rs) != (0x0)) { (ReadAbsorb)[rs] = 0x0; }
						uint temp_115 = (Gpr)[rs];
						DoLds();
						uint offset = (uint) (SignExt(0x10, imm));
						uint addr = (temp_115) + (offset);
						Alignment(addr, 0x20, true, pc);
						StoreMemory(0x20, addr, ReadCopreg(0x2, rt), pc);
						return(true);
						break;
					}
				}
			}
			return false;
		}
	}
}
