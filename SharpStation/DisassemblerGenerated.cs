/* Autogenerated from insts.td. DO NOT EDIT */
// ReSharper disable RedundantUsingDirective
// ReSharper disable SwitchStatementMissingSomeCases
// ReSharper disable SuggestVarOrType_BuiltInTypes
// ReSharper disable ArrangeRedundantParentheses
// ReSharper disable RedundantCast
// ReSharper disable ConditionIsAlwaysTrueOrFalse
// ReSharper disable HeuristicUnreachableCode
// ReSharper disable ConvertIfStatementToConditionalTernaryExpression
#pragma warning disable 162
using System;

namespace SharpStation {
	public partial class Cpu {
		internal string Disassemble(uint pc, uint inst) {
			switch((inst) >> ((int) 0x1a)) {
				case 0x0: {
					switch((inst) & (0x3f)) {
						case 0x0: {
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							uint shamt = ((inst) >> ((int) 0x6)) & (0x1f);
							return($"sll %{rd}, %{rt}, 0x{shamt:X}");
							break;
						}
						case 0x2: {
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							uint shamt = ((inst) >> ((int) 0x6)) & (0x1f);
							return($"srl %{rd}, %{rt}, 0x{shamt:X}");
							break;
						}
						case 0x3: {
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							uint shamt = ((inst) >> ((int) 0x6)) & (0x1f);
							return($"sra %{rd}, %{rt}, 0x{shamt:X}");
							break;
						}
						case 0x4: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"sllv %{rd}, %{rt}, %{rs}");
							break;
						}
						case 0x6: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"srlv %{rd}, %{rt}, 0x{rs:X}");
							break;
						}
						case 0x7: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"srav %{rd}, %{rt}, 0x{rs:X}");
							break;
						}
						case 0x8: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							return($"jr %{rs}");
							break;
						}
						case 0x9: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"jalr %{rd}, %{rs}");
							break;
						}
						case 0xc: {
							uint code = ((inst) >> ((int) 0x6)) & (0xfffff);
							return($"syscall 0x{code:X}");
							break;
						}
						case 0xd: {
							uint code = ((inst) >> ((int) 0x6)) & (0xfffff);
							return($"break 0x{code:X}");
							break;
						}
						case 0x10: {
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"mfhi %{rd}");
							break;
						}
						case 0x11: {
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"mthi %{rd}");
							break;
						}
						case 0x12: {
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"mflo %{rd}");
							break;
						}
						case 0x13: {
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"mtlo %{rd}");
							break;
						}
						case 0x18: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							ulong _t = (ulong) (((long) ((int) ((Gpr)[rs]))) * ((long) ((int) ((Gpr)[rt]))));
							return($"mult %{rs}, %{rt}");
							break;
						}
						case 0x19: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							ulong _t = ((ulong) ((Gpr)[rs])) * ((ulong) ((Gpr)[rt]));
							return($"multu %{rs}, %{rt}");
							break;
						}
						case 0x1a: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							
							return($"div %{rs}, %{rt}");
							break;
						}
						case 0x1b: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							
							return($"divu %{rs}, %{rt}");
							break;
						}
						case 0x20: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"add %{rd}, %{rs}, %{rt}");
							break;
						}
						case 0x21: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"addu %{rd}, %{rs}, %{rt}");
							break;
						}
						case 0x22: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"sub %{rd}, %{rs}, %{rt}");
							break;
						}
						case 0x23: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"subu %{rd}, %{rs}, %{rt}");
							break;
						}
						case 0x24: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"and %{rd}, %{rs}, %{rt}");
							break;
						}
						case 0x25: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"or %{rd}, %{rs}, %{rt}");
							break;
						}
						case 0x26: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"xor %{rd}, %{rs}, %{rt}");
							break;
						}
						case 0x27: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"nor %{rd}, %{rs}, %{rt}");
							break;
						}
						case 0x2a: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"slt %{rd}, %{rs}, %{rt}");
							break;
						}
						case 0x2b: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"sltu %{rd}, %{rs}, %{rt}");
							break;
						}
					}
					break;
				}
				case 0x1: {
					switch(((inst) >> ((int) 0x10)) & (0x1f)) {
						case 0x0: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bltz %{rs}, 0x{target:X}");
							break;
						}
						case 0x1: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bgez %{rs}, 0x{target:X}");
							break;
						}
						case 0x2: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bltz %{rs}, 0x{target:X}");
							break;
						}
						case 0x3: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bgez %{rs}, 0x{target:X}");
							break;
						}
						case 0x4: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bltz %{rs}, 0x{target:X}");
							break;
						}
						case 0x5: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bgez %{rs}, 0x{target:X}");
							break;
						}
						case 0x6: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bltz %{rs}, 0x{target:X}");
							break;
						}
						case 0x7: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bgez %{rs}, 0x{target:X}");
							break;
						}
						case 0x8: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bltz %{rs}, 0x{target:X}");
							break;
						}
						case 0x9: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bgez %{rs}, 0x{target:X}");
							break;
						}
						case 0xa: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bltz %{rs}, 0x{target:X}");
							break;
						}
						case 0xb: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bgez %{rs}, 0x{target:X}");
							break;
						}
						case 0xc: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bltz %{rs}, 0x{target:X}");
							break;
						}
						case 0xd: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bgez %{rs}, 0x{target:X}");
							break;
						}
						case 0xe: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bltz %{rs}, 0x{target:X}");
							break;
						}
						case 0xf: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bgez %{rs}, 0x{target:X}");
							break;
						}
						case 0x10: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bltzal %{rs}, 0x{target:X}");
							break;
						}
						case 0x11: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bgezal %{rs}, 0x{target:X}");
							break;
						}
						case 0x12: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bltzal %{rs}, 0x{target:X}");
							break;
						}
						case 0x13: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bgezal %{rs}, 0x{target:X}");
							break;
						}
						case 0x14: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bltzal %{rs}, 0x{target:X}");
							break;
						}
						case 0x15: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bgezal %{rs}, 0x{target:X}");
							break;
						}
						case 0x16: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bltzal %{rs}, 0x{target:X}");
							break;
						}
						case 0x17: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bgezal %{rs}, 0x{target:X}");
							break;
						}
						case 0x18: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bltzal %{rs}, 0x{target:X}");
							break;
						}
						case 0x19: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bgezal %{rs}, 0x{target:X}");
							break;
						}
						case 0x1a: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bltzal %{rs}, 0x{target:X}");
							break;
						}
						case 0x1b: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bgezal %{rs}, 0x{target:X}");
							break;
						}
						case 0x1c: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bltzal %{rs}, 0x{target:X}");
							break;
						}
						case 0x1d: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bgezal %{rs}, 0x{target:X}");
							break;
						}
						case 0x1e: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bltzal %{rs}, 0x{target:X}");
							break;
						}
						case 0x1f: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bgezal %{rs}, 0x{target:X}");
							break;
						}
					}
					break;
				}
				case 0x2: {
					uint imm = (inst) & (0x3ffffff);
					uint target = (((pc) + (0x4)) & (0xf0000000)) + ((imm) << ((int) 0x2));
					return($"j 0x{target:X}");
					break;
				}
				case 0x3: {
					uint imm = (inst) & (0x3ffffff);
					uint target = (((pc) + (0x4)) & (0xf0000000)) + ((imm) << ((int) 0x2));
					return($"jal 0x{target:X}");
					break;
				}
				case 0x4: {
					uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
					uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
					uint imm = (inst) & (0xffff);
					uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
					
					return($"beq %{rs}, %{rt}, 0x{target:X}");
					break;
				}
				case 0x5: {
					uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
					uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
					uint imm = (inst) & (0xffff);
					uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
					
					return($"bne %{rs}, %{rt}, 0x{target:X}");
					break;
				}
				case 0x6: {
					switch(((inst) >> ((int) 0x10)) & (0x1f)) {
						case 0x0: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"blez %{rs}, 0x{target:X}");
							break;
						}
					}
					break;
				}
				case 0x7: {
					switch(((inst) >> ((int) 0x10)) & (0x1f)) {
						case 0x0: {
							uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
							uint imm = (inst) & (0xffff);
							uint target = (uint) (((pc) + (0x4)) + ((SignExt(0x10, imm)) << ((int) 0x2)));
							
							return($"bgtz %{rs}, 0x{target:X}");
							break;
						}
					}
					break;
				}
				case 0x8: {
					uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
					uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
					uint imm = (inst) & (0xffff);
					uint eimm = (uint) (SignExt(0x10, imm));
					
					return($"addi %{rt}, %{rs}, 0x{eimm:X}");
					break;
				}
				case 0x9: {
					uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
					uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
					uint imm = (inst) & (0xffff);
					uint eimm = (uint) (SignExt(0x10, imm));
					return($"addiu %{rt}, %{rs}, 0x{eimm:X}");
					break;
				}
				case 0xa: {
					uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
					uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
					uint imm = (inst) & (0xffff);
					uint eimm = (uint) (SignExt(0x10, imm));
					return($"slti %{rt}, %{rs}, 0x{eimm:X}");
					break;
				}
				case 0xb: {
					uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
					uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
					uint imm = (inst) & (0xffff);
					uint eimm = (uint) (SignExt(0x10, imm));
					return($"sltiu %{rt}, %{rs}, 0x{eimm:X}");
					break;
				}
				case 0xc: {
					uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
					uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
					uint imm = (inst) & (0xffff);
					uint eimm = imm;
					return($"andi %{rt}, %{rs}, 0x{eimm:X}");
					break;
				}
				case 0xd: {
					uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
					uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
					uint imm = (inst) & (0xffff);
					uint eimm = imm;
					return($"ori %{rt}, %{rs}, 0x{eimm:X}");
					break;
				}
				case 0xe: {
					uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
					uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
					uint imm = (inst) & (0xffff);
					uint eimm = imm;
					return($"xori %{rt}, %{rs}, 0x{eimm:X}");
					break;
				}
				case 0xf: {
					uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
					uint imm = (inst) & (0xffff);
					return($"lui %{rt}, 0x{imm:X}");
					break;
				}
				case 0x10: {
					switch(((inst) >> ((int) 0x15)) & (0x1f)) {
						case 0x0: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"mfc0x{cop:X} %{rt}, 0x{rd:X}");
							break;
						}
						case 0x2: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"cfc0x{cop:X} %{rt}, 0x{rd:X}");
							break;
						}
						case 0x4: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"mtc0x{cop:X} %{rt}, 0x{rd:X}");
							break;
						}
						case 0x6: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"ctc0x{cop:X} %{rt}, 0x{rd:X}");
							break;
						}
						case 0x10: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x11: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x12: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x13: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x14: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x15: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x16: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x17: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x18: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x19: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x1a: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x1b: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x1c: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x1d: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x1e: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x1f: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
					}
					break;
				}
				case 0x11: {
					switch(((inst) >> ((int) 0x15)) & (0x1f)) {
						case 0x0: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"mfc0x{cop:X} %{rt}, 0x{rd:X}");
							break;
						}
						case 0x2: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"cfc0x{cop:X} %{rt}, 0x{rd:X}");
							break;
						}
						case 0x4: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"mtc0x{cop:X} %{rt}, 0x{rd:X}");
							break;
						}
						case 0x6: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"ctc0x{cop:X} %{rt}, 0x{rd:X}");
							break;
						}
						case 0x10: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x11: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x12: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x13: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x14: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x15: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x16: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x17: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x18: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x19: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x1a: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x1b: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x1c: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x1d: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x1e: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x1f: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
					}
					break;
				}
				case 0x12: {
					switch(((inst) >> ((int) 0x15)) & (0x1f)) {
						case 0x0: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"mfc0x{cop:X} %{rt}, 0x{rd:X}");
							break;
						}
						case 0x2: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"cfc0x{cop:X} %{rt}, 0x{rd:X}");
							break;
						}
						case 0x4: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"mtc0x{cop:X} %{rt}, 0x{rd:X}");
							break;
						}
						case 0x6: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"ctc0x{cop:X} %{rt}, 0x{rd:X}");
							break;
						}
						case 0x10: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x11: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x12: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x13: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x14: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x15: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x16: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x17: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x18: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x19: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x1a: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x1b: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x1c: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x1d: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x1e: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x1f: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
					}
					break;
				}
				case 0x13: {
					switch(((inst) >> ((int) 0x15)) & (0x1f)) {
						case 0x0: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"mfc0x{cop:X} %{rt}, 0x{rd:X}");
							break;
						}
						case 0x2: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"cfc0x{cop:X} %{rt}, 0x{rd:X}");
							break;
						}
						case 0x4: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"mtc0x{cop:X} %{rt}, 0x{rd:X}");
							break;
						}
						case 0x6: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
							uint rd = ((inst) >> ((int) 0xb)) & (0x1f);
							return($"ctc0x{cop:X} %{rt}, 0x{rd:X}");
							break;
						}
						case 0x10: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x11: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x12: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x13: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x14: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x15: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x16: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x17: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x18: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x19: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x1a: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x1b: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x1c: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x1d: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x1e: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
						case 0x1f: {
							uint cop = ((inst) >> ((int) 0x1a)) & (0x3);
							uint cofun = (inst) & (0x1ffffff);
							return($"cop0x{cop:X} 0x{cofun:X}");
							break;
						}
					}
					break;
				}
				case 0x20: {
					uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
					uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
					uint imm = (inst) & (0xffff);
					uint offset = (uint) (SignExt(0x10, imm));
					return($"lb %{rt}, 0x{offset:X}(%{rs})");
					break;
				}
				case 0x21: {
					uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
					uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
					uint imm = (inst) & (0xffff);
					uint offset = (uint) (SignExt(0x10, imm));
					uint addr = ((Gpr)[rs]) + (offset);
					return($"lh %{rt}, 0x{offset:X}(%{rs})");
					break;
				}
				case 0x22: {
					uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
					uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
					uint imm = (inst) & (0xffff);
					uint simm = (uint) (SignExt(0x10, imm));
					uint offset = ((Gpr)[rs]) + (simm);
					uint bottom = (offset) & (0x3);
					uint moffset = (offset) & (0xfffffffc);
					
					return($"lwl %{rt}, 0x{offset:X}(%{rs})");
					break;
				}
				case 0x23: {
					uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
					uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
					uint imm = (inst) & (0xffff);
					uint offset = (uint) (SignExt(0x10, imm));
					uint addr = ((Gpr)[rs]) + (offset);
					return($"lw %{rt}, 0x{offset:X}(%{rs})");
					break;
				}
				case 0x24: {
					uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
					uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
					uint imm = (inst) & (0xffff);
					uint offset = (uint) (SignExt(0x10, imm));
					return($"lbu %{rt}, 0x{offset:X}(%{rs})");
					break;
				}
				case 0x25: {
					uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
					uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
					uint imm = (inst) & (0xffff);
					uint offset = (uint) (SignExt(0x10, imm));
					uint addr = ((Gpr)[rs]) + (offset);
					return($"lhu %{rt}, 0x{offset:X}(%{rs})");
					break;
				}
				case 0x26: {
					uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
					uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
					uint imm = (inst) & (0xffff);
					uint simm = (uint) (SignExt(0x10, imm));
					uint offset = ((Gpr)[rs]) + (simm);
					uint bottom = (offset) & (0x3);
					
					return($"lwr %{rt}, 0x{offset:X}(%{rs})");
					break;
				}
				case 0x28: {
					uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
					uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
					uint imm = (inst) & (0xffff);
					uint offset = (uint) (SignExt(0x10, imm));
					return($"sb %{rt}, 0x{offset:X}(%{rs})");
					break;
				}
				case 0x29: {
					uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
					uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
					uint imm = (inst) & (0xffff);
					uint offset = (uint) (SignExt(0x10, imm));
					uint addr = ((Gpr)[rs]) + (offset);
					return($"sh %{rt}, 0x{offset:X}(%{rs})");
					break;
				}
				case 0x2a: {
					uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
					uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
					uint imm = (inst) & (0xffff);
					uint simm = (uint) (SignExt(0x10, imm));
					uint offset = ((Gpr)[rs]) + (simm);
					uint bottom = (offset) & (0x3);
					uint moffset = (offset) & (0xfffffffc);
					
					return($"swl %{rt}, 0x{offset:X}(%{rs})");
					break;
				}
				case 0x2b: {
					uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
					uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
					uint imm = (inst) & (0xffff);
					uint offset = (uint) (SignExt(0x10, imm));
					uint addr = ((Gpr)[rs]) + (offset);
					return($"sw %{rt}, 0x{offset:X}(%{rs})");
					break;
				}
				case 0x2e: {
					uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
					uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
					uint imm = (inst) & (0xffff);
					uint simm = (uint) (SignExt(0x10, imm));
					uint offset = ((Gpr)[rs]) + (simm);
					uint bottom = (offset) & (0x3);
					
					return($"swr %{rt}, 0x{offset:X}(%{rs})");
					break;
				}
				case 0x32: {
					uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
					uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
					uint imm = (inst) & (0xffff);
					uint offset = (uint) (SignExt(0x10, imm));
					uint addr = ((Gpr)[rs]) + (offset);
					return($"lwc2 %{rt}, 0x{offset:X}(%{rs})");
					break;
				}
				case 0x3a: {
					uint rs = ((inst) >> ((int) 0x15)) & (0x1f);
					uint rt = ((inst) >> ((int) 0x10)) & (0x1f);
					uint imm = (inst) & (0xffff);
					uint offset = (uint) (SignExt(0x10, imm));
					uint addr = ((Gpr)[rs]) + (offset);
					return($"swc2 %{rt}, 0x{offset:X}(%{rs})");
					break;
				}
			}
			return $"Unknown instruction at {pc:X8}: {inst:X8}";
		}
	}
}
